
platform :ios do
  lane :ios_build do
    cocoapods(
      clean_install: true,
      podfile: "./ios/Podfile"
    )
    xcclean(
      workspace: "./ios/GithubRepoSearch.xcworkspace",
      scheme: "GithubRepoSearch"
    )
    xcbuild(
      workspace: "./ios/GithubRepoSearch.xcworkspace",
      scheme: "GithubRepoSearch"
    )
  end
  desc "Push a new beta build to TestFlight"
  lane :build do
    cocoapods(
      clean_install: true,
      podfile: "./ios/Podfile"
    )
    app_version = get_version_number(xcodeproj: "./ios/GithubRepoSearch.xcodeproj", target: "GithubRepoSearch")
    new_build_number = latest_testflight_build_number(version: app_version, initial_build_number: 0) + 1
    increment_build_number(build_number: new_build_number, xcodeproj: "./ios/GithubRepoSearch.xcodeproj")
    build_app(
      workspace: "./ios/GithubRepoSearch.xcworkspace", 
      scheme: "GithubRepoSearch",
      clean: true,
    )
  end
  lane :test_flight do |options|
    changelog_from_git_commits
    upload_to_testflight(
      beta_app_review_info: {
        contact_email: "lee.wei.jun@rhbgroup.com",
        contact_first_name: "Jason",
        contact_last_name: "Lee",
        contact_phone: "12345678",
        demo_account_name: "demo",
        demo_account_password: "demo"
      }, 
      skip_waiting_for_build_processing: false, 
      distribute_external: true, 
      groups: [options[:env]], 
      changelog: ENV["GIT_COMMIT_BODY"]
    )
  end
  lane :beta do |options|
    build
    test_flight env:options[:env]
  end
end

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test", project_dir: 'android/')
  end
  lane :clean do
    gradle(task: "clean", project_dir: 'android/')
  end
  lane :buildDebug do
    clean
    gradle(
      task: "assembleDebug",
      project_dir: 'android/',
    )
  end
  lane :buildRelease do |options|
    isStorefile = options[:store]
    if options[:store]
      storeFile = options[:store]
      storePass = options[:pass]
      keyAlias = options[:alias]
      keyPass = options[:apass]
    else	
  	  storeFile = ENV["APP1_STORE_FILE"]
      storePass = ENV["APP1_STORE_PASS"]
      keyAlias = ENV["APP1_KEY_ALIAS"]
      keyPass = ENV["APP1_KEY_PASS"]
    end
    clean
    gradle(
      task: "assemble",
      build_type: "Release",
      project_dir: 'android/',
      print_command: false,
      print_command_output: true,
      properties: {
        "MYAPP_RELEASE_STORE_FILE" => storeFile,
        "MYAPP_RELEASE_STORE_PASSWORD" => storePass,
        "MYAPP_RELEASE_KEY_ALIAS" => keyAlias,
        "MYAPP_RELEASE_KEY_PASSWORD" => keyPass
      }
    )
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics
  
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end


  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end
end
